from flask import Flask, Blueprint, render_template, request, flash, jsonify
from flask_login import login_required, current_user
from pandas.core import indexing
from .models import Note
from . import db
import json
import os
import pickle 
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
from matplotlib.figure import Figure 
import io

views = Blueprint('views', __name__)

@views.route('/', methods=['GET', 'POST'])
@login_required
def home():
    current_user="munjal"
    app = Flask(__name__) 
    UPLOAD_FOLDER = 'C:/Users/Xinyu Li/Flask-Web-App-Malware'
    app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
    if request.method == 'POST':
        print("Inside / Hello world")
        if 'file' not in request.files:
            flash('No file part')
            return redirect(request.url)
        file = request.files['file']
        file.save(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))
        if file:
            print("file found success->", file)
            note = request.form.get('note')

        model = pickle.load(open('C:/Users/Xinyu Li/Flask-Web-App-Malware/model_cb.pkl','rb'))
        #features = pd.read_csv('C:/Users/Xinyu Li/Flask-Web-App-Malware/test_files/test_100_features.csv')
        features = pd.read_csv(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))
        preds_prob = model.predict_proba(features)
        #probability = preds_prob[:20]

        length = len(preds_prob)
        probs_0 = []
        probs_1 = []
        for i in range(length):
            probs_0.append(preds_prob[i][0])
            probs_1.append(preds_prob[i][1])
        
        N = length
        idx = np.arange(N)
        width = 0.25

        plt.figure(figsize=(20,10))
        #plt.bar(idx, probs_0[:20], width, label='No risk')
        #plt.bar(idx + width, probs_1[:20], width,label='Risk')
        plt.bar(idx, probs_0, width, label='No risk')
        plt.bar(idx + width, probs_1, width,label='Risk')

        plt.ylabel('Probabilty')
        plt.title('Probability of Malware Infection')

        plt.xticks(idx + width / 2, idx)
        plt.legend(loc='best') 
        plt.savefig('C:/Users/Xinyu Li/Flask-Web-App-Malware/website/static/output.png',\
            dpi='figure')

        if note:
            if len(note) < 1:
                flash('Note is too short!', category='error')
            else:
                new_note = Note(data=note, user_id=current_user.id)
                db.session.add(new_note)
                db.session.commit()
                flash('Note added!', category='success')

    return render_template("home.html", user=current_user, url ='C:/Users/Xinyu Li/Flask-Web-App-Malware/website/static/output.png',\
)


@views.route('/delete-note', methods=['POST'])
def delete_note():
    note = json.loads(request.data)
    noteId = note['noteId']
    note = Note.query.get(noteId)
    if note:
        if note.user_id == current_user.id:
            db.session.delete(note)
            db.session.commit()

    return jsonify({})
