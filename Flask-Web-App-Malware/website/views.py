from flask import Flask, Blueprint, render_template, request, flash, jsonify
from flask_login import login_required, current_user
from pandas.core import indexing
from .models import Note
from . import db
import json
import os
import pickle 
import pandas as pd
import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
from matplotlib.figure import Figure 
import io

views = Blueprint('views', __name__)

@views.route('/', methods=['GET', 'POST'])
@login_required
def home():

    app = Flask(__name__) 

    UPLOAD_FOLDER = os.path.dirname(app.instance_path)
    
    app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

    if request.method == 'POST':
        
        if 'file' not in request.files:
        
            flash('No file part')
        
            return redirect(request.url)

        file = request.files['file']

        file.save(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))
        
        if file:

            print("file found success->", file)
            
        model = pickle.load(open(os.path.join(app.config['UPLOAD_FOLDER'], 'model_cb.pkl'), 'rb'))
        
        features = pd.read_csv(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))
        preds_prob = model.predict_proba(features)
        #probability = preds_prob[:20]

        length = len(preds_prob)

        probs_0 = []
        probs_1 = []

        for i in range(length):

            probs_0.append(preds_prob[i][0])
            probs_1.append(preds_prob[i][1])
        
        N = length
        idx = np.arange(N)
        width = 0.25

        plt.figure(figsize=(20,10))
        #plt.bar(idx, probs_0[:20], width, label='No risk')
        #plt.bar(idx + width, probs_1[:20], width,label='Risk')
        plt.bar(idx, probs_0, width, label='No risk')
        plt.bar(idx + width, probs_1, width,label='Risk')

        plt.ylabel('Probabilty')
        plt.title('Probability of Malware Infection')

        plt.xticks(idx + width / 2, idx)
        plt.legend(loc='best') 

        plt.savefig(os.path.join( app.static_folder, 'output.png'), dpi='figure')

    isGraphCreated =  os.path.exists(os.path.join( app.static_folder, 'output.png'))
    
    return render_template("home.html", user = current_user, isGraphCreated = isGraphCreated)
