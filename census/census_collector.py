import subprocess
import re
import os
from winreg import *
import errno
import json
from datetime import datetime
import time
import requests

# Helpers
def findValueRegex(regex, filename):
    with open(filename, encoding='utf-16') as file:
        for line in file:
            matches = re.search(regex, line)
            if matches:
                value = matches.group(1)
                break

    return value

def findValueRegistry(registry, keyname, value):
    if registry == "HKEY_LOCAL_MACHINE":
        reg = ConnectRegistry(None, HKEY_LOCAL_MACHINE)
    elif registry == "HKEY_CURRENT_USER":
        reg = ConnectRegistry(None, HKEY_CURRENT_USER)

    key = OpenKey(reg, keyname)

    try:
        val = QueryValueEx(key, value)
    except OSError as e:
        if e.errno == errno.ENOENT:
            # specified value doesn't exist in this key
            val = None
    finally:
        key.Close()

    return val

def collectCensus():
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    print("collecting census... ", current_time)

    """
    Features to be collected from PowerShell script
    state_ID:       AVProductStatesIdentifier
    activation:    Census_ActivationChannel
    """
    subprocess.Popen([r'C:\WINDOWS\system32\WindowsPowerShell\v1.0\powershell.exe',
    '-ExecutionPolicy',
    'Unrestricted',
    './stateID_activation.ps1'])

    regex_antivirus= r"productState.*: (.*)"
    regex_activation = r", (.*) channel"

    state_ID = findValueRegex(regex_antivirus, "antivirus.txt")
    activation = findValueRegex(regex_activation, "activation.txt")


    """
    Features to be collected from folder path
    platform_ver:    AppVersion
    """
    path = "C:\ProgramData\Microsoft\Windows Defender\Platform"
    platform_ver = max(os.listdir(path))


    """
    Features collected from registry
    sigVer:            AvSigVersion
    country:           CountryIdentifier
    install_type:      Census_OSInstallTypeName
    OSVer:             Census_OSVersion
    smart_screen:      SmartScreen
    build_revision:    Census_OSBuildRevision
    build_lab:         OsBuildLab
    """
    sigVer_key = r"SOFTWARE\Microsoft\Windows Defender\Signature Updates"
    country_key = r"Control Panel\International\Geo"
    install_type_key = r"SYSTEM\Setup\Upgrade"
    OS_key = r"SOFTWARE\Microsoft\Windows NT\CurrentVersion"
    smart_screen_key1 = r"SOFTWARE\Policies\Microsoft\Windows\System"
    smart_screen_key2 = r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer"

    sigVer = findValueRegistry("HKEY_LOCAL_MACHINE", sigVer_key, "AVSignatureVersion")[0]

    country = findValueRegistry("HKEY_CURRENT_USER", country_key, "Nation")[0]

    if findValueRegistry("HKEY_LOCAL_MACHINE", install_type_key, "Upgrade"):
        install_type = "Upgrade"
    else:
        install_type = "Clean"

    build_lab = findValueRegistry("HKEY_LOCAL_MACHINE", OS_key, "BuildLabEx")[0]

    smart_screen_value1 = findValueRegistry("HKEY_LOCAL_MACHINE", smart_screen_key1, "SmartScreenEnabled")
    smart_screen_value2 = findValueRegistry("HKEY_LOCAL_MACHINE", smart_screen_key2, "SmartScreenEnabled")
    if smart_screen_value1 or smart_screen_value2:
        if smart_screen_value1:
            smart_screen = smart_screen_value1[0]
            if len(smart_screen) == 0:
                smart_screen = "ExistsNotSet"
        if smart_screen_value2:
            smart_screen = smart_screen_value2[0]
            if len(smart_screen) == 0:
                smart_screen = "ExistsNotSet"
    else:
        smart_screen = ""

    build_revision = str(findValueRegistry("HKEY_LOCAL_MACHINE", OS_key, "UBR")[0])
    OS_major = findValueRegistry("HKEY_LOCAL_MACHINE", OS_key, "CurrentMajorVersionNumber")[0]
    OS_minor = findValueRegistry("HKEY_LOCAL_MACHINE", OS_key, "CurrentMinorVersionNumber")[0]
    OS_build = findValueRegistry("HKEY_LOCAL_MACHINE", OS_key, "CurrentBuildNumber")[0]
    OSVer = str(OS_major)+"."+str(OS_minor)+"."+OS_build+"."+build_revision

    # creating json
    census_data = {
        "AVProductStatesIdentifier": state_ID,
        "Census_ActivationChannel": activation,
        "AppVersion": platform_ver,
        "AvSigVersion": sigVer,
        "CountryIdentifier": country,
        "Census_OSInstallTypeName": install_type,
        "Census_OSVersion": OSVer,
        "SmartScreen": smart_screen,
        "Census_OSBuildRevision": build_revision,
        "OsBuildLab": build_lab
    }

    #with open("census.json", "w") as file:
        #file.write(json.dumps(census_data))

    census_json = json.dumps(census_data)

    #sending json to cloud
    endpoint = "https://f509ce3b.us-south.apigw.appdomain.cloud/0G8PkN/DataCollection"
    clientID = "9532c6ad-a667-4176-ac7c-7f3f0b0e5e17"
    Headers = {
        "X-IBM-Client-Id":clientID,
        'Content-type': 'application/json',
        'Accept': 'application/json'
               }

    #
    r = requests.post(url=endpoint, data=census_json, headers=Headers)
    print(r.status_code)

if __name__ == '__main__':
    for _ in range(5):
        collectCensus()
        time.sleep(5)
    #while True:
        #collectCensus()
        #time.sleep(5)







